import { GoogleSpreadsheet, GoogleSpreadsheetRow, GoogleSpreadsheetWorksheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import 'dotenv/config';

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.CLIENT_EMAIL,
    key: (process.env.API_KEY || "").replace(/\\\\n/g, '\n'),
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

const doc = new GoogleSpreadsheet('1H1HFvtmn3etpeCkYZzNwoXOtvV06kXePIpEpo9WwqHc', serviceAccountAuth);

let invSheet: GoogleSpreadsheetWorksheet | undefined;
let connectPromise: Promise<boolean> | undefined;

type InventoryRowData = {
    tag: string;
    make: string;
    model: string;
    description: string;
    value: number;
    serial: string;
    container: string;
    checkedOut: boolean;
    isContainer: boolean;
}

export async function connect() {
    connectPromise = new Promise(async (resolve, reject) => {
        await doc.loadInfo(); // loads document properties and worksheets

        invSheet = doc.sheetsByIndex[0];
        invSheet.setHeaderRow(['tag', 'make', 'model', 'description', 'value', 'serial', 'container', 'checkedOut', 'isContainer']);
        resolve(true);
    });
}

export async function getInventory() {
    await connectPromise;
    if (invSheet) {
        const rows = await invSheet.getRows<InventoryRowData>();
        console.log(rows[0].get('isContainer'));
        return rows.map(row => ({
            tag: row.get('tag'),
            make: row.get('make'),
            model: row.get('model'),
            description: row.get('description'),
            value: row.get('value'),
            serial: row.get('serial'),
            container: row.get('container'),
            checkedOut: `${row.get('checkedOut')}` == "TRUE",
            isContainer: `${row.get('isContainer')}` == "TRUE"
        }));
    }
}

export async function checkin(tag: string) {
    await connectPromise;
    if (invSheet) {
        const rows = await invSheet.getRows<InventoryRowData>();
        const row = rows.find(row => row.get('tag') == tag);
        if (row) {
            row.set('checkedOut', false);
            row.save();
        }
    }
}

export async function checkout(tag: string) {
    await connectPromise;
    if (invSheet) {
        const rows = await invSheet.getRows<InventoryRowData>();
        const row = rows.find(row => row.get('tag') == tag);
        if (row) {
            row.set('checkedOut', true);
            row.save();
        }
    }
}

export async function create(tag: string, make: string, model: string, description: string, value: number, serial: string, container: string, checkedOut: boolean, isContainer: boolean) {
    await connectPromise;
    if (invSheet) {
        await invSheet.addRow({
            tag,
            make,
            model,
            description,
            value,
            serial,
            container,
            checkedOut,
            isContainer
        });
    }
}

export async function move(tag: string, container: string) {
    await connectPromise;
    if (invSheet) {
        const rows = await invSheet.getRows<InventoryRowData>();
        const row = rows.find(row => row.get('tag') == tag);
        if (row) {
            row.set('container', container);
            row.save();
        }
    }
}
